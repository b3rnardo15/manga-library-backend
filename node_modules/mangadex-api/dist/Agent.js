"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agent = exports.DefaultOptions = void 0;
const smol_request_1 = require("smol-request");
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const deepmerge_1 = require("./lib/deepmerge");
const auth_1 = require("./api/auth");
const get_bearer_auth_1 = require("./lib/get-bearer-auth");
const pkg = JSON.parse(fs_1.default.readFileSync(path_1.join(__dirname, '..', 'package.json'), 'utf-8'));
exports.DefaultOptions = {
    apiHost: 'https://api.mangadex.org'
};
class Agent {
    constructor({ apiHost = 'https://api.mangadex.org', session } = {}) {
        this.apiHost = apiHost;
        this.session = session;
    }
    setSession(session) {
        this.session = session;
    }
    async saveSession(path) {
        return Agent.saveSession(path, this.session);
    }
    static async saveSession(path, session) {
        await fs_1.default.promises.writeFile(path, `${session.session}\n${session.refresh}`, 'utf-8');
        return true;
    }
    async loginWithSession(path) {
        const file = await fs_1.default.promises.readFile(path, 'utf8');
        const [session, refresh] = file.split('\n');
        if (!session || !refresh) {
            throw new Error(`Lost "${(!session && 'session') || (!refresh && 'refresh')}"`);
        }
        await auth_1.AuthResolver.checkToken({ session, refresh });
        this.session = {
            session,
            refresh
        };
        return true;
    }
    async call(url, options = {}, body) {
        const result = await Agent.call(url, deepmerge_1.deepmerge({
            baseUrl: this.apiHost,
            headers: get_bearer_auth_1.getBearerTokenHeader(this.session)
        }, options), body);
        return result;
    }
    static async call(url, options = {}, body) {
        const requestUrl = `${options.baseUrl || exports.DefaultOptions.apiHost}${!(url.startsWith('/') && options.baseUrl.endsWith('/')) && '/'}${url}`;
        const result = await smol_request_1.request(requestUrl, deepmerge_1.deepmerge({
            responseType: 'json',
            method: 'GET',
            headers: {
                'User-Agent': `mangadex-api/${pkg.version}`,
                ...(body
                    ? {
                        'Content-Type': 'application/json'
                    }
                    : {})
            }
        }, options), body ? JSON.stringify(body) : undefined);
        return result;
    }
}
exports.Agent = Agent;
