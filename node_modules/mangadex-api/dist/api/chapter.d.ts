import { ApiBase } from './base';
import { ChapterExtendedResponse, ChapterList, ChapterResponse } from '../../types/data-types/chapter';
import { Language } from '../../types/data-types/language';
import { SearchOrder } from '../../types/base';
export declare type SearchChapterOptions = Partial<{
    limit: number;
    offset: number;
    /**
     * Chapter ids (limited to 100 per request)
     */
    ids: string[];
    title: string;
    groups: string[];
    uploader: string;
    manga: string;
    volume: string;
    chapter: string;
    translatedLanguage: Language[];
    /**
     * DateTime string with following format: YYYY-MM-DDTHH:MM:SS
     */
    createdAtSince: string;
    /**
     * DateTime string with following format: YYYY-MM-DDTHH:MM:SS
     */
    updatedAtSince: string;
    /**
     * DateTime string with following format: YYYY-MM-DDTHH:MM:SS
     */
    publishAtSince: string;
    order: Record<'createdAt' | 'updatedAt' | 'publishAt' | 'volume' | 'chapter', SearchOrder>;
}>;
export declare class ChapterResolver extends ApiBase {
    /**
     * Get a chapter
     * @param chapterId The chapter ID
     * @param options request options
     */
    getChapter(chapterId: string, options?: {
        /**
         * If true, will additionally fetch data in relationships. (scanlation_group, manga, user)
         */
        withRelationShips?: false;
    }): Promise<ChapterResponse>;
    /**
     * Get a chapter
     * @param chapterId The chapter ID
     * @param options request options
     */
    getChapter(chapterId: string, options?: {
        /**
         * If true, will additionally fetch data in relationships. (scanlation_group, manga, user)
         */
        withRelationShips?: true;
    }): Promise<ChapterExtendedResponse>;
    /**
     * Get a chapter
     * @param chapterId The chapter ID
     * @param options request options
     */
    static getChapter(chapterId: string, options?: {
        /**
         * If true, will additionally fetch data in relationships. (scanlation_group, manga, user)
         */
        withRelationShips?: false;
    }): Promise<ChapterResponse>;
    /**
     * Get a chapter
     * @param chapterId The chapter ID
     * @param options request options
     */
    static getChapter(chapterId: string, options?: {
        /**
         * If true, will additionally fetch data in relationships. (scanlation_group, manga, user)
         */
        withRelationShips?: true;
    }): Promise<ChapterExtendedResponse>;
    search(options: SearchChapterOptions): Promise<ChapterList>;
    static search(options: SearchChapterOptions): Promise<ChapterList>;
}
