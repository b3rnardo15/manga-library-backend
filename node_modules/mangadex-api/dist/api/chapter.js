"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChapterResolver = void 0;
const Agent_1 = require("../Agent");
const base_1 = require("./base");
const manga_1 = require("./manga");
const user_1 = require("./user");
const relationship_type_1 = require("../lib/relationship-type");
const group_1 = require("./group");
const format_query_params_1 = require("../lib/format-query-params");
class ChapterResolver extends base_1.ApiBase {
    /**
     * Get a chapter
     * @param chapterId The chapter ID
     * @param options request options
     */
    async getChapter(chapterId, options = {}) {
        const { data: chapter } = await this.agent.call(`chapter/${chapterId}`);
        if (chapter.result === 'error') {
            return chapter;
        }
        const scanlationGroup = relationship_type_1.getRelationshipType('scanlation_group', chapter.relationships);
        const manga = relationship_type_1.getRelationshipType('manga', chapter.relationships);
        const uploader = relationship_type_1.getRelationshipType('user', chapter.relationships)[0];
        if (!options.withRelationShips) {
            return chapter;
        }
        chapter.data.attributes.scanlation_group = await Promise.all(scanlationGroup.map(({ id }) => group_1.GroupResolver.getGroup(id)));
        chapter.data.attributes.manga = (await Promise.all(manga.map(({ id }) => manga_1.MangaResolver.getManga(id))))[0];
        chapter.data.attributes.uploader = await user_1.UserResolver.getUser(uploader.id);
        return chapter;
    }
    /**
     * Get a chapter
     * @param chapterId The chapter ID
     * @param options request options
     */
    static async getChapter(chapterId, options = {}) {
        const { data: chapter } = await Agent_1.Agent.call(`chapter/${chapterId}`);
        if (chapter.result === 'error') {
            return chapter;
        }
        const scanlationGroup = relationship_type_1.getRelationshipType('scanlation_group', chapter.relationships);
        const manga = relationship_type_1.getRelationshipType('manga', chapter.relationships);
        const uploader = relationship_type_1.getRelationshipType('user', chapter.relationships)[0];
        if (!options.withRelationShips) {
            return chapter;
        }
        chapter.data.attributes.scanlation_group = await Promise.all(scanlationGroup.map(({ id }) => group_1.GroupResolver.getGroup(id)));
        chapter.data.attributes.manga = (await Promise.all(manga.map(({ id }) => manga_1.MangaResolver.getManga(id))))[0];
        chapter.data.attributes.uploader = await user_1.UserResolver.getUser(uploader.id);
        return chapter;
    }
    async search(options) {
        const { data } = await this.agent.call('chapter', {
            params: format_query_params_1.formatQueryParams(options)
        });
        return data;
    }
    static async search(options) {
        const { data } = await Agent_1.Agent.call('chapter', {
            params: format_query_params_1.formatQueryParams(options)
        });
        return data;
    }
}
exports.ChapterResolver = ChapterResolver;
