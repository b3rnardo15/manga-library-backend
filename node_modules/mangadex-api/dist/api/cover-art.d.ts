/// <reference types="node" />
import { ApiBase } from './base';
import { CoverArtExtendedResponse, CoverArtResponse, CoverArtsResponse } from '../../types/data-types/cover-art';
import { ReadStream } from 'fs';
export declare type GetCoverArtsOptions = Partial<{
    limit: number;
    offset: number;
    manga: string[];
    ids: string[];
    uploaders: string[];
    createdAt: string;
    uploadedAt: string;
    volume: string;
}>;
export declare class CoverArtResolver extends ApiBase {
    getCoverArt(coverArtId: string, options?: {
        withRelationShips?: false;
    }): Promise<CoverArtResponse>;
    getCoverArt(coverArtId: string, options?: {
        withRelationShips?: true;
    }): Promise<CoverArtExtendedResponse>;
    static getCoverArt(coverArtId: string, options?: {
        /**
         * If true, will additionally fetch data in relationships. (manga, user)
         */
        withRelationShips?: false;
    }): Promise<CoverArtResponse>;
    static getCoverArt(coverArtId: string, options?: {
        /**
         * If true, will additionally fetch data in relationships. (manga, user)
         */
        withRelationShips?: true;
    }): Promise<CoverArtExtendedResponse>;
    getCoverArts(options: GetCoverArtsOptions): Promise<CoverArtsResponse>;
    static getCoverArts(options: GetCoverArtsOptions): Promise<CoverArtsResponse>;
    /**
     * Upload Cover
     *
     * **WARNING this API does not have test, cannot guarantee that it's working as expected**
     *
     * If you have permissions and can test it, please report to [github](https://github.com/ejnshtein/mangadex-api)!
     */
    uploadCover(mangaId: string, coverFile: ReadStream): Promise<CoverArtResponse>;
}
