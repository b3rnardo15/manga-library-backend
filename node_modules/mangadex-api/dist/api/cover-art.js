"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoverArtResolver = void 0;
const Agent_1 = require("../Agent");
const base_1 = require("./base");
const relationship_type_1 = require("../lib/relationship-type");
const manga_1 = require("./manga");
const user_1 = require("./user");
const format_query_params_1 = require("../lib/format-query-params");
const form_data_1 = __importDefault(require("form-data"));
class CoverArtResolver extends base_1.ApiBase {
    async getCoverArt(coverArtId, options = {}) {
        const { data: cover } = await this.agent.call(`cover/${coverArtId}`);
        if (cover.result === 'error') {
            return cover;
        }
        const manga = relationship_type_1.getRelationshipType('manga', cover.relationships)[0];
        const user = relationship_type_1.getRelationshipType('user', cover.relationships)[0];
        cover.data.attributes.urls = [
            `https://uploads.mangadex.org/cover/${manga[0].id}/${cover.data.attributes.fileName}`,
            `https://uploads.mangadex.org/cover/${manga[0].id}/${cover.data.attributes.fileName}.256.jpg`,
            `https://uploads.mangadex.org/cover/${manga[0].id}/${cover.data.attributes.fileName}.512.jpg`
        ];
        if (!options.withRelationShips) {
            return cover;
        }
        cover.data.attributes.manga = await manga_1.MangaResolver.getManga(manga.id);
        cover.data.attributes.uploader = await user_1.UserResolver.getUser(user.id);
        return cover;
    }
    static async getCoverArt(coverArtId, options = {}) {
        const { data: cover } = await Agent_1.Agent.call(`cover/${coverArtId}`);
        if (cover.result === 'error') {
            return cover;
        }
        const manga = relationship_type_1.getRelationshipType('manga', cover.relationships)[0];
        const user = relationship_type_1.getRelationshipType('user', cover.relationships)[0];
        cover.data.attributes.urls = [
            `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}`,
            `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}.256.jpg`,
            `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}.512.jpg`
        ];
        if (!options.withRelationShips) {
            return cover;
        }
        cover.data.attributes.manga = await manga_1.MangaResolver.getManga(manga.id);
        cover.data.attributes.uploader = await user_1.UserResolver.getUser(user.id);
        return cover;
    }
    async getCoverArts(options) {
        const { data: covers } = await this.agent.call('cover', {
            params: format_query_params_1.formatQueryParams(options)
        });
        covers.results = covers.results.map((cover) => {
            if (cover.result === 'error') {
                return cover;
            }
            const manga = relationship_type_1.getRelationshipType('manga', cover.relationships)[0];
            cover.data.attributes.urls = [
                `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}`,
                `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}.256.jpg`,
                `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}.512.jpg`
            ];
            return cover;
        });
        return covers;
    }
    static async getCoverArts(options) {
        const { data: covers } = await Agent_1.Agent.call('cover', {
            params: format_query_params_1.formatQueryParams(options)
        });
        covers.results = covers.results.map((cover) => {
            if (cover.result === 'error') {
                return cover;
            }
            const manga = relationship_type_1.getRelationshipType('manga', cover.relationships)[0];
            cover.data.attributes.urls = [
                `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}`,
                `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}.256.jpg`,
                `https://uploads.mangadex.org/cover/${manga.id}/${cover.data.attributes.fileName}.512.jpg`
            ];
            return cover;
        });
        return covers;
    }
    /**
     * Upload Cover
     *
     * **WARNING this API does not have test, cannot guarantee that it's working as expected**
     *
     * If you have permissions and can test it, please report to [github](https://github.com/ejnshtein/mangadex-api)!
     */
    async uploadCover(mangaId, coverFile) {
        const form = new form_data_1.default();
        form.append('file', coverFile);
        const { data: coverArt } = await this.agent.call(`cover/${mangaId}`, {
            method: 'POST',
            headers: form.getHeaders()
        }, form);
        return coverArt;
    }
}
exports.CoverArtResolver = CoverArtResolver;
