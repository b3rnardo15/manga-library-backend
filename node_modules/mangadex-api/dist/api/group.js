"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupResolver = void 0;
const Agent_1 = require("../Agent");
const base_1 = require("./base");
const format_query_params_1 = require("../lib/format-query-params");
class GroupResolver extends base_1.ApiBase {
    /**
     * Get a group.
     * @param groupId The group ID
     * @param options Request options
     */
    async getGroup(groupId, options = {}) {
        const { data: group } = await this.agent.call(`group/${groupId}`);
        if (group.result === 'error') {
            return group;
        }
        // if (!options.withRelationShips) {
        //   return group
        // }
        // group.data.attributes.members = await Promise.all(
        //   getRelationshipType('user', group.relationships).map(({ id }) =>
        //     UserResolver.getUser(id)
        //   )
        // )
        return group;
    }
    /**
     * Get a group.
     * @param groupId The group ID
     * @param options Request options
     */
    static async getGroup(groupId, options = {}) {
        const { data: group } = await Agent_1.Agent.call(`group/${groupId}`);
        if (group.result === 'error') {
            return group;
        }
        // const members = getRelationshipType('user', group.relationships)
        if (!options.withRelationShips) {
            return group;
        }
        return group;
    }
    async search(options) {
        const { data } = await this.agent.call('group', {
            params: format_query_params_1.formatQueryParams(options)
        });
        return data;
    }
    static async search(options) {
        const { data } = await Agent_1.Agent.call('group', {
            params: format_query_params_1.formatQueryParams(options)
        });
        return data;
    }
}
exports.GroupResolver = GroupResolver;
