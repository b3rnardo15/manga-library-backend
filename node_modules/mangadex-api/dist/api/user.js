"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserResolver = void 0;
const Agent_1 = require("../Agent");
const base_1 = require("./base");
const format_query_params_1 = require("../lib/format-query-params");
class UserResolver extends base_1.ApiBase {
    /**
     * User list
     */
    async search(options) {
        const { data } = await this.agent.call('user', {
            params: format_query_params_1.formatQueryParams(options)
        });
        return data;
    }
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    async getUser(userId) {
        const { data: user } = await this.agent.call(`user/${userId}`);
        return user;
    }
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    static async getUser(userId) {
        const { data: user } = await Agent_1.Agent.call(`user/${userId}`);
        return user;
    }
    /**
     * Logged User details
     */
    async getMe() {
        const user = await this.getUser('me');
        return user;
    }
    /**
     * Get logged User followed User list
     */
    async getUserFollowedUsers() {
        const { data } = await this.agent.call('user/follows/user');
        return data;
    }
    /**
     * Get logged User followed Manga list
     */
    async getUserFollowedManga() {
        const { data } = await this.agent.call('user/follows/manga');
        return data;
    }
    /**
     * Get logged User followed Groups
     */
    async getUserFollowedGroups() {
        const { data } = await this.agent.call('user/follows/group');
        return data;
    }
    /**
     * Update User password
     * @param oldPassword 8-1024 characters
     * @param newPassword 8-1024 characters
     */
    async updatePassword(oldPassword, newPassword) {
        const { data } = await this.agent.call('user/password', {
            method: 'POST'
        }, {
            oldPassword,
            newPassword
        });
        return data;
    }
    /**
     * Update User email
     */
    async updateEmail(email) {
        const { data } = await this.agent.call('user/email', {
            method: 'POST'
        }, {
            email
        });
        return data;
    }
}
exports.UserResolver = UserResolver;
