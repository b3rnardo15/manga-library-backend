"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthResolver = void 0;
const base_1 = require("./base");
const Agent_1 = require("../Agent");
const get_bearer_auth_1 = require("../lib/get-bearer-auth");
class AuthResolver extends base_1.ApiBase {
    async login(username, password) {
        if (!username || !password) {
            throw new Error('Not enough login info.');
        }
        const { data } = await Agent_1.Agent.call('auth/login', {
            method: 'POST'
        }, {
            username,
            password
        });
        if (data.result === 'error') {
            return data;
        }
        this.agent.setSession(data.token);
        return data;
    }
    static async login(username, password) {
        if (!username || !password) {
            throw new Error('Not enough login info.');
        }
        const { data } = await Agent_1.Agent.call('auth/login', {
            method: 'POST'
        }, {
            username,
            password
        });
        return data;
    }
    async logout() {
        const { data } = await this.agent.call('auth/logout', {
            method: 'POST'
        });
        if (data.result === 'error') {
            return data;
        }
        this.agent.session = null;
        return data;
    }
    static async logout(session) {
        const { data } = await Agent_1.Agent.call('auth/logout', {
            method: 'POST',
            headers: get_bearer_auth_1.getBearerTokenHeader(session)
        });
        return data;
    }
    async refresh() {
        const { data } = await this.agent.call('auth/refresh', {
            method: 'POST'
        });
        return data;
    }
    static async refresh(session) {
        const { data } = await Agent_1.Agent.call('auth/refresh', {
            method: 'POST',
            headers: get_bearer_auth_1.getBearerRefreshTokenHeader(session)
        });
        return data;
    }
    static async checkToken(session) {
        const { data } = await Agent_1.Agent.call('auth/check', {
            headers: get_bearer_auth_1.getBearerTokenHeader(session)
        });
        return data;
    }
}
exports.AuthResolver = AuthResolver;
