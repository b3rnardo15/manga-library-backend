import { ApiBase } from './base';
import { UpdateEmailResponse, UpdatePasswordResponse, UserFollowedGroupsResponse, UserFollowedMangaResponse, UserFollowedUsersResponse, UserResponse, UsersResponse } from '../../types/data-types/user';
import { SearchOrder } from '../../types/base';
export declare type SearchUsersOptions = Partial<{
    /**
     * @default 10
     */
    limit: number;
    offset: number;
    ids: string[];
    username: string;
    order: Record<'username', SearchOrder>;
}>;
export declare class UserResolver extends ApiBase {
    /**
     * User list
     */
    search(options: SearchUsersOptions): Promise<UsersResponse>;
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    getUser(userId: string): Promise<UserResponse>;
    /**
     * Get a user
     * @param userId The user ID number, or the string 'me' as an alias for the current cookie-authenticated user
     * @param options Request options
     */
    static getUser(userId: string): Promise<UserResponse>;
    /**
     * Logged User details
     */
    getMe(): Promise<UserResponse>;
    /**
     * Get logged User followed User list
     */
    getUserFollowedUsers(): Promise<UserFollowedUsersResponse>;
    /**
     * Get logged User followed Manga list
     */
    getUserFollowedManga(): Promise<UserFollowedMangaResponse>;
    /**
     * Get logged User followed Groups
     */
    getUserFollowedGroups(): Promise<UserFollowedGroupsResponse>;
    /**
     * Update User password
     * @param oldPassword 8-1024 characters
     * @param newPassword 8-1024 characters
     */
    updatePassword(oldPassword: string, newPassword: string): Promise<UpdatePasswordResponse>;
    /**
     * Update User email
     */
    updateEmail(email: string): Promise<UpdateEmailResponse>;
}
