import { AgentOptions } from '../types/agent';
import { Agent } from './Agent';
import { CoverArtResolver } from './api';
import { AccountResolver } from './api/account';
import { AuthResolver } from './api/auth';
import { ChapterResolver } from './api/chapter';
import { GroupResolver } from './api/group';
import { MangaResolver } from './api/manga';
import { UserResolver } from './api/user';
import { LegacyType, MappingIdResponse } from '../types/data-types/legacy';
export declare class Mangadex {
    private options;
    agent: Agent;
    account: AccountResolver;
    auth: AuthResolver;
    chapter: ChapterResolver;
    coverArt: CoverArtResolver;
    group: GroupResolver;
    manga: MangaResolver;
    user: UserResolver;
    static readonly auth: typeof AuthResolver;
    static readonly chapter: typeof ChapterResolver;
    static readonly coverArt: typeof CoverArtResolver;
    static readonly group: typeof GroupResolver;
    static readonly manga: typeof MangaResolver;
    static readonly user: typeof UserResolver;
    constructor(options?: AgentOptions);
    convertLegacyId(ids: number[], type: LegacyType): Promise<MappingIdResponse>;
    static convertLegacyId(ids: number[], type: LegacyType): Promise<MappingIdResponse>;
}
